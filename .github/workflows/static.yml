# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read 

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: dev
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Step 2: Fetch commit details for the provided tag
      # Step 2: Fetch commit details for the provided tag
      # Debug Step: Print the environment directly
      - name: Print job environment
        run: echo "Job Environment:${{ job.environment }}"
      - name: Fetch commit details associated with tag
        id: fetch_commit
        run: |
          TAG=${{ github.event.inputs.tag }}
          # Fetch the full commit SHA associated with the tag
          COMMIT_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/git/ref/tags/$TAG" | jq -r '.object.sha')

          # Fetch commit details using the full commit SHA
          COMMIT_DETAILS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_DATA")

          # Extract specific details from the commit
          COMMIT_SHA=$(echo $COMMIT_DETAILS | jq -r '.sha') # Full SHA
          COMMIT_MESSAGE=$(echo $COMMIT_DETAILS | jq -r '.commit.message')
          COMMIT_AUTHOR=$(echo $COMMIT_DETAILS | jq -r '.commit.author.name')
          COMMIT_DATE=$(echo $COMMIT_DETAILS | jq -r '.commit.author.date')
          DEPLOY_TIME=$(date)

          # Set variables for replacement in index.html
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "DEPLOY_TIME=$DEPLOY_TIME" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ job.environment }}" >> $GITHUB_ENV

      # Step 3: Fetch workflow run associated with the commit SHA
      - name: Fetch workflow run associated with commit
        id: fetch_run
        run: |
          # Fetch workflow runs and filter by the full commit SHA
          RUN_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" | jq -r \
          --arg COMMIT_SHA "${{ env.COMMIT_SHA }}" '.workflow_runs[] | select(.head_sha == $COMMIT_SHA)')

          # Check if RUN_DATA is empty; provide debug info
          if [[ -z "$RUN_DATA" ]]; then
            echo "No matching workflow run found for commit SHA: $COMMIT_SHA" >&2
            RUN_NUMBER="N/A"
            RUN_STATUS="N/A"
            RUN_CONCLUSION="N/A"
          else
            # Extract specific workflow run details
            RUN_NUMBER=$(echo "$RUN_DATA" | jq -r '.run_number // "N/A"')
            RUN_STATUS=$(echo "$RUN_DATA" | jq -r '.status // "N/A"')
            RUN_CONCLUSION=$(echo "$RUN_DATA" | jq -r '.conclusion // "N/A"')

            # Extract additional details like URLs for logs, artifacts, etc.
            WORKFLOW_HTML_URL=$(echo "$RUN_DATA" | jq -r '.html_url // "N/A"')
            WORKFLOW_ARTIFACTS_URL=$(echo "$RUN_DATA" | jq -r '.artifacts_url // "N/A"')
            WORKFLOW_LOGS_URL=$(echo "$RUN_DATA" | jq -r '.logs_url // "N/A"')
          fi

          # Set workflow run variables for HTML injection
          echo "RUN_NUMBER=$RUN_NUMBER" >> $GITHUB_ENV
          echo "RUN_STATUS=$RUN_STATUS" >> $GITHUB_ENV
          echo "RUN_CONCLUSION=$RUN_CONCLUSION" >> $GITHUB_ENV
          echo "WORKFLOW_HTML_URL=$WORKFLOW_HTML_URL" >> $GITHUB_ENV
          echo "WORKFLOW_ARTIFACTS_URL=$WORKFLOW_ARTIFACTS_URL" >> $GITHUB_ENV
          echo "WORKFLOW_LOGS_URL=$WORKFLOW_LOGS_URL" >> $GITHUB_ENV

      # Step 4: Print variables for debugging
      - name: Print variables for debugging
        run: |
          echo "TAG: ${{ env.TAG }}"
          echo "ENVIRONMENT: ${{ env.ENVIRONMENT }}"
          echo "RUN_NUMBER: ${{ env.RUN_NUMBER }}"
          echo "RUN_STATUS: ${{ env.RUN_STATUS }}"
          echo "RUN_CONCLUSION: ${{ env.RUN_CONCLUSION }}"
          echo "COMMIT_SHA: ${{ env.COMMIT_SHA }}"
          echo "COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}"
          echo "COMMIT_AUTHOR: ${{ env.COMMIT_AUTHOR }}"
          echo "COMMIT_DATE: ${{ env.COMMIT_DATE }}"
          echo "DEPLOY_TIME: ${{ env.DEPLOY_TIME }}"
          echo "WORKFLOW_HTML_URL: ${{ env.WORKFLOW_HTML_URL }}"
          echo "WORKFLOW_ARTIFACTS_URL: ${{ env.WORKFLOW_ARTIFACTS_URL }}"
          echo "WORKFLOW_LOGS_URL: ${{ env.WORKFLOW_LOGS_URL }}"

      # Step 5: Update index.html with deployment details
      - name: Update index.html with deployment details
        run: |
          sed -i "s|{{ TAG }}|${{ env.TAG || 'N/A' }}|g" index.html
          sed -i "s|{{ ENVIRONMENT }}|${{ env.ENVIRONMENT || 'N/A' }}|g" index.html
          sed -i "s|{{ COMMIT_SHA }}|${{ env.COMMIT_SHA || 'N/A' }}|g" index.html
          sed -i "s|{{ COMMIT_MESSAGE }}|${{ env.COMMIT_MESSAGE || 'N/A' }}|g" index.html
          sed -i "s|{{ COMMIT_AUTHOR }}|${{ env.COMMIT_AUTHOR || 'N/A' }}|g" index.html
          sed -i "s|{{ COMMIT_DATE }}|${{ env.COMMIT_DATE || 'N/A' }}|g" index.html
          sed -i "s|{{ DEPLOY_TIME }}|${{ env.DEPLOY_TIME || 'N/A' }}|g" index.html
          sed -i "s|{{ RUN_NUMBER }}|${{ env.RUN_NUMBER || 'N/A' }}|g" index.html
          sed -i "s|{{ RUN_STATUS }}|${{ env.RUN_STATUS || 'N/A' }}|g" index.html
          sed -i "s|{{ RUN_CONCLUSION }}|${{ env.RUN_CONCLUSION || 'N/A' }}|g" index.html
          sed -i "s|{{ WORKFLOW_HTML_URL }}|${{ env.WORKFLOW_HTML_URL || 'N/A' }}|g" index.html
          sed -i "s|{{ WORKFLOW_ARTIFACTS_URL }}|${{ env.WORKFLOW_ARTIFACTS_URL || 'N/A' }}|g" index.html
          sed -i "s|{{ WORKFLOW_LOGS_URL }}|${{ env.WORKFLOW_LOGS_URL || 'N/A' }}|g" index.html
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
